/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Message.java
 *
 * Created on Nov 15, 2009, 1:07:14 AM
 */

import java.io.*;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.util.StringTokenizer;

/**
 * @author peeyush
 */
public class Message extends javax.swing.JFrame {
    String t_list[] = new String[100];
    ;
    String ip_list[] = new String[100];
    String stp;
    boolean kl = false;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;

    /**
     * Creates new form Message
     */
    public Message(String s[], String p) {
        stp = p;
        initComponents();
        // jTextField1.setVisible(false);
// new Message(list1.getSelectedItems()).setVisible(true);


        t_list = s;

        for (int i = 0; i < t_list.length; i++) {
            StringTokenizer st = new StringTokenizer(t_list[i], " ");
            //while(st.hasMoreTokens)
            ip_list[i] = st.nextToken();
            ip_list[i] = st.nextToken();
        }


    }

    public Message(String p) {
        stp = p;
        initComponents();
        kl = true;
    }

    public Message() {
        initComponents();
        kl = true;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Message().setVisible(true);
            }
        });
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jTextField1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("DejaVu Sans", 1, 15)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(236, 90, 221));
        jLabel1.setText("                    SEND MESSAGE");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("SEND");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jRadioButton1.setText("Encrypt N Seal Message");
        jRadioButton1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jRadioButton1StateChanged(evt);
            }
        });
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        jTextField1.setText("Enter Key Here");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addGap(34, 34, 34)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(145, 145, 145)
                                                .addComponent(jButton1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(jRadioButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addContainerGap(31, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jButton1)
                                        .addComponent(jRadioButton1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        if (kl == false) {
            for (int i = 0; i < t_list.length; i++) {
                try {
                    int j;
                    for (j = 0; j < ip_list[i].length(); j++) {
                        if (ip_list[i].charAt(j) == 10)
                            break;
                    }
                    String x = ip_list[i].substring(0, j);

                    System.out.println("ip list" + ip_list[i]);
                    InetAddress ia = InetAddress.getByName(x);
                    DatagramSocket as = new DatagramSocket();
                    String msg = stp + " : " + jTextArea1.getText();
                    if (jRadioButton1.isSelected()) {


                        FileWriter fstream = new FileWriter("out.txt");
                        BufferedWriter out = new BufferedWriter(fstream);
                        out.write(msg);
                        //Close the output stream
                        out.close();
                        msg = "";
                        Runtime rt = Runtime.getRuntime();
                        //   Process pr = rt.exec("cmd /c dir");
                        System.out.println(System.getProperty("user.dir"));
                        Process pr = rt.exec("./a.out " + "out.txt" + " " + "ency.txt" + " " + jTextField1.getText());
                        BufferedReader input = new BufferedReader(new InputStreamReader(pr.getInputStream()));

                        String line = null;

                        while ((line = input.readLine()) != null) {
                            System.out.println(line);
                        }
                        File file = new File("ency.txt");
                        FileInputStream fis = null;
                        BufferedInputStream bis = null;
                        DataInputStream dis = null;


                        fis = new FileInputStream(file);

                        // Here BufferedInputStream is added for fast reading.
                        bis = new BufferedInputStream(fis);
                        dis = new DataInputStream(bis);

                        // dis.available() returns 0 if the file does not have more lines.
                        while (dis.available() != 0) {

                            // this statement reads the line from the file and print it to
                            // the console.
                            msg += dis.readLine();
                            msg += "\n";
                        }

                        // dispose all the resources after using them.
                        fis.close();
                        bis.close();
                        dis.close();


                        msg = "123" + msg;
                    }
                    System.out.println(ia);
                    DatagramPacket qs = new DatagramPacket(msg.getBytes(), msg.length(), ia, 6789);
                    as.send(qs);
//port=6789;
                    System.out.println("ip list" + ip_list[i]);
                } catch (Exception e) {
                    System.out.print("error  here" + e);
                }
            }
        } else {
            try {
                //    System.out.println("ip list"+ip_list[i]);
                InetAddress ia = InetAddress.getByName("255.255.255.255");
                DatagramSocket as = new DatagramSocket();
                String msg = stp + " : " + jTextArea1.getText();
                if (jRadioButton1.isSelected()) msg = "123" + msg;
//System.out.println(address);
                DatagramPacket qs = new DatagramPacket(msg.getBytes(), msg.length(), ia, 6789);
                as.send(qs);
//port=6789;
                //System.out.println("ip list"+ip_list[i]);
            } catch (Exception e) {
                System.out.print("error  here" + e);
            }

        }
        this.setVisible(false);
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
//this.jTextField1.setVisible(false);
//this.setVisible(false);
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jRadioButton1StateChanged
        //     jTextField1.setVisible(true); // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton1StateChanged
    // End of variables declaration//GEN-END:variables

}
